function varargout = robustlsqnonlin(fun, x0, lb, ub, weightMethod, options)
%ROBUSTLSQNONLIN solves robust non-linear least squares problems.
%   details

if nargin < 6 || isempty(options)
    options = optimset(@lsqcurvefit);
end
if nargin < 5 || isempty(weightMethod)
    weightMethod = 'bisquare';
end
if nargin < 4
    ub = [];
    lb = [];
end
if nargin == 3
    help(mfilename)
end
if nargin < 2
    help(mfilename)
end




end


%%
% 
%
function [weightMethod] = validateInputArguments(...
    fun, ...
    x0, ...
    lb, ...
    ub, ...
    weightMethod, ...
    options ...
    )

validateattributes(...
    fun, ...
    {'function_handle'}, ...
    {'scalar', 'nonempty'}, ...
    mfilename, ...
    'fun', ...
    1 ...
    );

assert(...
    nargin(fun) == 1, ...
    ['No. of input arguments of ''fun'' do not match the desired no. of 1 ', ...
    '(x-values)'] ...
    );

validateattributes(...
    x0, ...
    {'numeric'}, ...
    {'vector', 'nonempty', 'finite'}, ...
    mfilename, ...
    'x0', ...
    2 ...
    );

validateattributes(...
    lb, ...
    {'numeric'}, ...
    {}, ...
    mfilename, ...
    'lb', ...
    3 ...
    );

validateattributes(...
    ub, ...
    {'numeric'}, ...
    {}, ...
    mfilename, ...
    'ub', ...
    4 ...
    );

validateattributes(...
    weightMethod, ...
    {'char'}, ...
    {'nonempty'}, ...
    mfilename, ...
    'weightMethod', ...
    5 ...
    );

validateattributes(...
    options, ...
    {'numeric', 'struct'}, ...
    {}, ...
    mfilename, ...
    'options', ...
    6 ...
    );

weightMethod = validatestring(...
    weightMethod, ...
    {'bisquare', 'andrews', 'cauchy', 'fair', 'huber', 'logistic', 'ols', 'talwar', 'welsch'} ...
    );
end

%%
% Define robust weights
% 
function [weightFun, tuningConstant] = weightFunAndConstant(method)
switch lower(method)
    case 'bisquare'
        weightFun      = @(r) (abs(r) < 1) .* (1 - r.^2).^2;
        tuningConstant = 4.685;
        
    case 'andrews'
        weightFun      = @(r) (abs(r) < pi) .* sin(r) ./ r;
        tuningConstant = 1.339;
        
    case 'cauchy'
        weightFun      = @(r) 1 ./ (1 + r.^2);
        tuningConstant = 2.385;
        
    case 'fair'
        weightFun      = @(r) 1 ./ (1 + abs(r));
        tuningConstant = 1.4;
        
    case 'huber'
        weightFun      = @(r) 1 ./ max(1, abs(r));
        tuningConstant = 1.345;
        
    case 'logistic'
        weightFun      = @(r) tanh(r) ./ r;
        tuningConstant = 1.205;
        
    case 'ols'
        weightFun      = @(r) ones(size(r));
        tuningConstant = 1;
        
    case 'talwar'
        weightFun      = @(r) 1 * (abs(r) < 1);
        tuningConstant = 2.795;
        
    case 'welsch'
        weightFun      = @(r) exp(-(r.^2));
        tuningConstant = 2.985;
        
end
end

